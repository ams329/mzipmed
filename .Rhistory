Top=cbind(lmCov,Topright)
Btm=cbind(Botmleft,MZIPCov)
CovM=rbind(Top,Btm)
logRRDEse=sqrt(GamDE %*% CovM %*% GamDE)*abs(X-Xstar)
logRRIEse=sqrt(GamIE %*% CovM %*% GamIE)*abs(X-Xstar)
logRRTEse=sqrt(GamTE %*% CovM %*% GamTE)*abs(X-Xstar)
LRRDEci=exp(log(RRDE)-1.96*logRRDEse)
URRDEci=exp(log(RRDE)+1.96*logRRDEse)
RRDECI=c(LRRDEci,URRDEci)
LRRIEci=exp(log(RRIE)-1.96*logRRIEse)
URRIEci=exp(log(RRIE)+1.96*logRRIEse)
RRIECI=c(LRRIEci,URRIEci)
LRRTEci=exp(log(RRTE)-1.96*logRRTEse)
URRTEci=exp(log(RRTE)+1.96*logRRTEse)
RRTECI=c(LRRTEci,URRTEci)
}
if (error=='Boot'){
datab=list()
datab2=list()
outregb=list()
medregb=list()
RRDEb=list()
RRIEb=list()
PMb=list()
confb=list()
RRTEb=list()
logRRDEb=list()
logRRIEb=list()
logRRTEb=list()
for (i in 1:n){
datab[[i]]=sample(1:nrow(mzipdata),replace=T)
datab2[[i]]=mzipdata[datab[[i]],]
if (is.null(confounder)){
outregb[[i]]=mzip(y=datab2[[i]][["outcome"]],pred=cbind(datab2[[i]][["exposure"]],datab2[[i]][["mediator"]]),print=F)
} else{
confb[[i]]=data.matrix(datab2[[i]][c(4:m)])
outregb[[i]]=mzip(y=datab2[[i]][["outcome"]],pred=cbind(datab2[[i]][["exposure"]],datab2[[i]][["mediator"]],confb[[i]]),print=F)
}
medregb[[i]]=stats::lm(f,data=datab2[[i]])
RRDEb[[i]]=exp(outregb[[i]]$Aest[2]*(X-Xstar))
RRIEb[[i]]=exp(outregb[[i]]$Aest[3]*medregb[[i]]$coefficients[[2]]*(X-Xstar))
PMb[[i]]=RRDEb[[i]]*(RRIEb[[i]]-1)/(RRIEb[[i]]*RRDEb[[i]]-1)
RRTEb[[i]]=RRDEb[[i]]*RRIEb[[i]]
logRRDEb[[i]]=log(RRDEb[[i]])
logRRIEb[[i]]=log(RRIEb[[i]])
logRRTEb[[i]]=log(RRTEb[[i]])
}
#quantile part of stats package. colSds part of matrixStats package (not base)
#Risk Ratio Direct Effect
logRRDEse=matrixStats::colSds(do.call(rbind,logRRDEb))
RRDECI=stats::quantile(do.call(rbind,RRDEb),c(0.025,.975))
#Risk Ratio Indirect Effect
logRRIEse=matrixStats::colSds(do.call(rbind,logRRIEb))
RRIECI=stats::quantile(do.call(rbind,RRIEb),c(0.025,.975))
logRRTEse=matrixStats::colSds(do.call(rbind,logRRTEb))
RRTECI=stats::quantile(do.call(rbind,RRTEb),c(0.025,.975))
}
output=list(MZIP=outreg,LM=medreg,RRNDE=RRDE,RRNIE=RRIE,PM=PM,logRRNDEse=logRRDEse,RRNDEci=RRDECI,logRRNIEse=logRRIEse,RRNIEci=RRIECI,
RRTE=RRTE,logRRTEse=logRRTEse,RRTEci=RRTECI)
}
MZIPMM_sim2=function(n,r,B0,B1,B2,g0,g1,g2,g3,a0,a1,a2,a3,sigma){
G=c(g0,g1,g2,g3)
A=c(a0,a1,a2,a3)
x0=rep(1,n) #vector of 1's for the intercept
RRIE=exp(a2*B1)
RRDE=exp(a1)
PM=RRDE*(RRIE-1)/(RRIE*RRDE-1)
x1=list()
x2=list()
X=list()
Z=list()
zero=list()
pois=list()
med=list()
eps=list()
y=list()
data=list()
MZIPM_anal=list()
DEsim=list()
IEsim=list()
logDEsim=list()
logIEsim=list()
PMsim=list()
DEperbias=list()
IEperbias=list()
IEci=list()
IECount=list()
DEci=list()
DECount=list()
IEPowCnt=list()
DEPowCnt=list()
SimIESE=list()
SimDESE=list()
time=list()
timee=list()
for (i in 1:r){
x0=rep(1,n) #vector of 1's for the intercept
x1[[i]]=rbinom(n,1,0.5) #Set binary variable so that it is either 0 or 1 with probability 0.5
x2[[i]]=rchisq(n,2)
#x2[[i]]=ifelse(x2[[i]]>10,10,x2[[i]])
eps[[i]]=rnorm(n=n,0,sigma)
med[[i]]=B0+B1*x1[[i]]+B2*x2[[i]]+eps[[i]]
X[[i]]=cbind(x0,x1[[i]],med[[i]],x2[[i]])
Z[[i]]=X[[i]]
zero[[i]] = 1-rbinom(n,1,exp(Z[[i]]%*%G)/(1+exp(Z[[i]]%*%G)))
#pois[[i]] = rpois(n,exp(X[[i]]%*%A+log(1+exp(Z[[i]]%*%G))))
pois[[i]]=rnbinom(n, mu=exp(X[[i]]%*%A+log(1+exp(Z[[i]]%*%G))),size=2)
y[[i]]=zero[[i]]*pois[[i]]
#y[[i]]=ifelse(y[[i]]>10,10,y[[i]]) #is this ok
data[[i]]=data.frame(y[[i]],med[[i]],x1[[i]],x2[[i]])
time[[i]]<-system.time({
MZIPM_anal[[i]]=MZIPMedOut(n=1000,outcome=y[[i]],mediator=med[[i]],exposure=x1[[i]],confounder = x2[[i]],error='Delta',robust=T)
})
timee[[i]]=time[[i]]["elapsed"]
DEsim[[i]]=MZIPM_anal[[i]][["RRNDE"]]
logDEsim[[i]]=log(DEsim[[i]])
IEsim[[i]]=MZIPM_anal[[i]][["RRNIE"]]
logIEsim[[i]]=log(IEsim[[i]])
DEperbias[[i]]=((MZIPM_anal[[i]][["RRNDE"]]-RRDE)/RRDE)*100
IEperbias[[i]]=((MZIPM_anal[[i]][["RRNIE"]]-RRIE)/RRIE)*100
#Cov Probability Boot
DEci[[i]]=MZIPM_anal[[i]][["RRNDEci"]]
DECount[[i]]=ifelse(DEci[[i]][[1]]<RRDE & RRDE<DEci[[i]][[2]],1,0)
IEci[[i]]=MZIPM_anal[[i]][["RRNIEci"]]
IECount[[i]]=ifelse(IEci[[i]][[1]]<RRIE & RRIE<IEci[[i]][[2]],1,0)
#Power
IEPowCnt[[i]]=ifelse(IEci[[i]][[1]]<1 & 1<IEci[[i]][[2]],0,1)
DEPowCnt[[i]]=ifelse(DEci[[i]][[1]]<1 & 1<DEci[[i]][[2]],0,1)
SimIESE[[i]]=MZIPM_anal[[i]][["logRRNIEse"]]
SimDESE[[i]]=MZIPM_anal[[i]][["logRRNDEse"]]
}
IECP=colSums2((do.call(rbind,IECount)))/r
DECP=colSums2((do.call(rbind,DECount)))/r
DEmedpb=colMedians(do.call(rbind,DEperbias))
IEmedpb=colMedians(do.call(rbind,IEperbias))
DEstd=colSds(do.call(rbind,logDEsim))
IEstd=colSds(do.call(rbind,logIEsim))
#Power
IEPow=colSums2((do.call(rbind,IEPowCnt)))/r
DEPow=colSums2((do.call(rbind,DEPowCnt)))/r
#Median Standard error
DESE=colMedians(do.call(rbind,SimDESE))
IESE=colMedians(do.call(rbind,SimIESE))
#time
timefin=colSums2((do.call(rbind,timee)))/r
output=list(RRNIE=RRIE,DEmedpb=DEmedpb,IEmedpb=IEmedpb,DEstd=DEstd,IEstd=IEstd,
IECP=IECP,DECP=DECP,
IEPow=IEPow,DEPow=DEPow,IESE=IESE,DESE=DESE,PM=PM,timefin=timefin)
}
set.seed(666)
banana=MZIPMM_sim2(n=200,r=1000,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
mzip = function(y,pred,print=F){
intercept=rep(1,length(y))
Z=cbind(intercept,pred)
X=Z
like = function(theta) {
zg = Z%*%c(theta[1:dim(Z)[2]])
z0g = Z[y==0,]%*%c(theta[1:dim(Z)[2]])
x0a = X[y==0,]%*%c(theta[(1+dim(Z)[2]):(dim(Z)[2]+dim(X)[2])])
z1g = Z[y>0,]%*%c(theta[1:dim(Z)[2]])
x1a = X[y>0,]%*%c(theta[(1+dim(Z)[2]):(dim(Z)[2]+dim(X)[2])])
#log likelihood
bill=-1*sum(log(1+exp(zg)))+
sum(log(exp(z0g)+exp(-(1+exp(z0g))*exp(x0a))))+
sum(-(1+exp(z1g))*exp(x1a))+
sum(y[y>0]*log(1+exp(z1g)))+
sum(x1a*y[y>0])-
sum(lgamma(y[y>0]+1))
return(-bill)
}
estimates=stats::optim(rep(0,dim(Z)[2]+dim(X)[2]), like,hessian=T,method="BFGS")
gamma_hat = estimates$par[1:dim(Z)[2]]
alpha_hat = estimates$par[(1+dim(Z)[2]):(dim(Z)[2]+dim(X)[2])]
z_gamma_hat 	= Z%*%gamma_hat # n x 1 vector
x_alpha_hat 	= X%*%alpha_hat # n x 1 vector*/
outcome=y
psi_hat = exp(z_gamma_hat)/(1+exp(z_gamma_hat)) #n x 1 vector
nu_hat = exp(x_alpha_hat) #n x 1 vector
psi_hat2 = 1/(1-psi_hat)
# diag_gg	= (psi_hat^2*(1-psi_hat)*(psi_hat*psi_hat2*nu_hat+1)*(exp(nu_hat*psi_hat2)-nu_hat*(psi_hat2)-1))/(psi_hat*exp(nu_hat*psi_hat2)+(1-psi_hat))
#
# diag_aa = (nu_hat*(psi_hat*(exp(nu_hat*psi_hat2)-nu_hat*psi_hat2-1)+1))/(psi_hat*exp(nu_hat*psi_hat2)+(1-psi_hat))
#
# diag_ga = nu_hat*psi_hat*(1-exp(-nu_hat*psi_hat2)+(-(1+nu_hat*psi_hat*psi_hat2+nu_hat*(psi_hat*psi_hat2)^2+exp(-nu_hat*psi_hat2))/((psi_hat*psi_hat2)*exp(nu_hat*psi_hat2)+1)))
#
# #test for error
# dd_gg=diag(as.vector(diag_gg))
# dd_aa=diag(as.vector(diag_aa))
#
# tx_dd_gg=t(Z)%*%diag(as.vector(diag_gg))
# dd_gg_x=diag(as.vector(diag_gg))%*%(Z)
#
# I_gg			= t(Z)%*%diag(as.vector(diag_gg))%*%(Z)
# I_aa			= t(X)%*%diag(as.vector(diag_aa))%*%(X)
# I_ga			= t(X)%*%diag(as.vector(diag_ga))%*%(Z)
# I_ag			= t(I_ga)
#
Inform=estimates$hessian
Inv_inform		= MASS::ginv(Inform)
w=nrow(Inv_inform)/2+1
k=nrow(Inv_inform)
aCov=Inv_inform[w:k,w:k]
M1 = matrix(0,nrow=dim(Z)[2]+dim(X)[2],ncol=dim(Z)[2]+dim(X)[2])
score_g = matrix(0,nrow=dim(Z)[2],ncol=1)
score_a = matrix(0,nrow=dim(X)[2],ncol=1)
for(qq in 1:dim(Z)[1]){
y = outcome[qq]
ph= psi_hat[qq]
ph2=psi_hat2[qq]
nu=nu_hat[qq]
score_g = ((y==0)*(ph*ph2*(exp(nu*ph2)-nu))/(ph*ph2*exp(nu*ph2)+1)+ph*(y - 1) - (y>0)*ph*ph2*nu)%*%t(Z[qq,])
score_a = ((y-nu*ph2)*(y>0) - (y==0)*(nu*ph2)/(ph*ph2*exp(nu*ph2)+1))%*%t(X[qq,])
score = cbind(score_g,score_a)
M1 = M1 + t(score)%*%(score)
}
robust = Inv_inform%*%M1%*%Inv_inform
RobaCov=robust[w:k,w:k]
m_se			= sqrt(diag(Inv_inform))
r_se			= sqrt(diag(robust))
mupper = c(gamma_hat,alpha_hat) + 1.96*m_se
mlower = c(gamma_hat,alpha_hat) - 1.96*m_se
rupper = c(gamma_hat,alpha_hat) + 1.96*r_se
rlower = c(gamma_hat,alpha_hat) - 1.96*r_se
GWald=(gamma_hat/m_se[1:dim(Z)[2]])^2
GPval=ifelse(1-stats::pchisq(q=(gamma_hat/m_se[1:dim(Z)[2]])^2,df=1)<.0001,"<.0001",round(1-pchisq(q=(gamma_hat/m_se[1:dim(Z)[2]])^2,df=1),digits=5))
GRobWald=(gamma_hat/r_se[1:dim(Z)[2]])^2
GRobPval=ifelse(1-stats::pchisq(q=(gamma_hat/r_se[1:dim(Z)[2]])^2,df=1)<.0001,"<.0001",round(1-pchisq(q=(gamma_hat/r_se[1:dim(Z)[2]])^2,df=1),digits=5))
AWald=(alpha_hat/m_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])])^2
APval=ifelse(1-stats::pchisq(q=(alpha_hat/m_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])])^2,df=1)<.0001,"<.0001",round(1-pchisq(q=(alpha_hat/m_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])])^2,df=1),digits=5))
ARobWald=(alpha_hat/r_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])])^2
ARobPval=ifelse(1-stats::pchisq(q=(alpha_hat/r_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])])^2,df=1)<.0001,"<.0001",round(1-pchisq(q=(alpha_hat/r_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])])^2,df=1),digits=5))
if(print){cat("Gamma Estimates:",gamma_hat,'\n',"Alpha estimates:",alpha_hat,'\n',"M SE: ", m_se,'\n',"R SE:",r_se,'\n',"Gamma P-Value",GPval,'\n',"R Gamma P-Val",GRobPval,'\n',"Alpha P-Val",APval,'\n',"R Alpha P-Val",ARobPval,'\n')}
output = list( Gest = gamma_hat,Aest = alpha_hat, GModelSE = m_se[1:dim(Z)[2]], GRobustSE = r_se[1:dim(Z)[2]],
AModelSE = m_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])], ARobustSE = r_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])],
GModelUpper = mupper[1:dim(Z)[2]], AModelUpper = mupper[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])],
GModelLower = mlower[1:dim(Z)[2]], AModelLower = mlower[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])],
GRobustUpper = rupper[1:dim(Z)[2]], ARobustUpper = rupper[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])],
GRobustLower = rlower[1:dim(Z)[2]], ARobustLower = rlower[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])],
GModelZ = gamma_hat/m_se[1:dim(Z)[2]], GRobustZ = gamma_hat/r_se[1:dim(Z)[2]],
GModelZpval = 2*(1-stats::pnorm(abs(gamma_hat/m_se[1:dim(Z)[2]]))),
GRobustZpval = 2*(1-stats::pnorm(abs(gamma_hat/r_se[1:dim(Z)[2]]))),
AModelZ = alpha_hat/m_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])],
ARobustZ = alpha_hat/r_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])],
AModelZpval = 2*(1-stats::pnorm(abs(alpha_hat/m_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])]))),
ARobustZpval = 2*(1-stats::pnorm(abs(alpha_hat/r_se[(dim(Z)[2]+1):(dim(Z)[2]+dim(X)[2])]))),
AlphaCov=aCov,Cov=Inv_inform,RobCov=robust,RobAlphaCov=RobaCov)
return(output)
}
set.seed(666)
banana=MZIPMM_sim2(n=200,r=1000,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
MZIPMM_sim2=function(n,r,B0,B1,B2,g0,g1,g2,g3,a0,a1,a2,a3,sigma){
G=c(g0,g1,g2,g3)
A=c(a0,a1,a2,a3)
x0=rep(1,n) #vector of 1's for the intercept
RRIE=exp(a2*B1)
RRDE=exp(a1)
PM=RRDE*(RRIE-1)/(RRIE*RRDE-1)
x1=list()
x2=list()
X=list()
Z=list()
zero=list()
pois=list()
med=list()
eps=list()
y=list()
data=list()
MZIPM_anal=list()
DEsim=list()
IEsim=list()
logDEsim=list()
logIEsim=list()
PMsim=list()
DEperbias=list()
IEperbias=list()
IEci=list()
IECount=list()
DEci=list()
DECount=list()
IEPowCnt=list()
DEPowCnt=list()
SimIESE=list()
SimDESE=list()
time=list()
timee=list()
for (i in 1:r){
x0=rep(1,n) #vector of 1's for the intercept
x1[[i]]=rbinom(n,1,0.5) #Set binary variable so that it is either 0 or 1 with probability 0.5
x2[[i]]=rchisq(n,2)
#x2[[i]]=ifelse(x2[[i]]>10,10,x2[[i]])
eps[[i]]=rnorm(n=n,0,sigma)
med[[i]]=B0+B1*x1[[i]]+B2*x2[[i]]+eps[[i]]
X[[i]]=cbind(x0,x1[[i]],med[[i]],x2[[i]])
Z[[i]]=X[[i]]
zero[[i]] = 1-rbinom(n,1,exp(Z[[i]]%*%G)/(1+exp(Z[[i]]%*%G)))
#pois[[i]] = rpois(n,exp(X[[i]]%*%A+log(1+exp(Z[[i]]%*%G))))
pois[[i]]=rnbinom(n, mu=exp(X[[i]]%*%A+log(1+exp(Z[[i]]%*%G))),size=2)
y[[i]]=zero[[i]]*pois[[i]]
#y[[i]]=ifelse(y[[i]]>10,10,y[[i]]) #is this ok
data[[i]]=data.frame(y[[i]],med[[i]],x1[[i]],x2[[i]])
time[[i]]<-system.time({
MZIPM_anal[[i]]=MZIPMedOut(n=1000,outcome=y[[i]],mediator=med[[i]],exposure=x1[[i]],confounder = x2[[i]],error='Delta',robust=T)
})
timee[[i]]=time[[i]]["elapsed"]
DEsim[[i]]=MZIPM_anal[[i]][["RRNDE"]]
logDEsim[[i]]=log(DEsim[[i]])
IEsim[[i]]=MZIPM_anal[[i]][["RRNIE"]]
logIEsim[[i]]=log(IEsim[[i]])
DEperbias[[i]]=((MZIPM_anal[[i]][["RRNDE"]]-RRDE)/RRDE)*100
IEperbias[[i]]=((MZIPM_anal[[i]][["RRNIE"]]-RRIE)/RRIE)*100
#Cov Probability Boot
DEci[[i]]=MZIPM_anal[[i]][["RRNDEci"]]
DECount[[i]]=ifelse(DEci[[i]][[1]]<RRDE & RRDE<DEci[[i]][[2]],1,0)
IEci[[i]]=MZIPM_anal[[i]][["RRNIEci"]]
IECount[[i]]=ifelse(IEci[[i]][[1]]<RRIE & RRIE<IEci[[i]][[2]],1,0)
#Power
IEPowCnt[[i]]=ifelse(IEci[[i]][[1]]<1 & 1<IEci[[i]][[2]],0,1)
DEPowCnt[[i]]=ifelse(DEci[[i]][[1]]<1 & 1<DEci[[i]][[2]],0,1)
SimIESE[[i]]=MZIPM_anal[[i]][["logRRNIEse"]]
SimDESE[[i]]=MZIPM_anal[[i]][["logRRNDEse"]]
}
IECount2 = IECount[-which(sapply(IECount, is.na))]
IECP=colMeans2((do.call(rbind,IECount2)))
DECount2 = DECount[-which(sapply(DECount, is.na))]
DECP=colMeans2((do.call(rbind,DECount2)))
DEmedpb=colMedians(do.call(rbind,DEperbias))
IEmedpb=colMedians(do.call(rbind,IEperbias))
DEstd=colSds(do.call(rbind,logDEsim))
IEstd=colSds(do.call(rbind,logIEsim))
#Power
IEPowCnt2 = IEPowCnt[-which(sapply(IEPowCnt, is.na))]
IEPow=colMeans2((do.call(rbind,IEPowCnt2)))
DEPowCnt2 = DEPowCnt[-which(sapply(DEPowCnt, is.na))]
DEPow=colMeans2((do.call(rbind,DEPowCnt2)))
#Median Standard error
SimIESE2 = SimIESE[-which(sapply(SimIESE, is.na))]
IESE=colMedians(do.call(rbind,SimIESE2))
SimDESE2 = SimDESE[-which(sapply(SimDESE, is.na))]
DESE=colMedians(do.call(rbind,SimDESE2))
#time
timefin=colSums2((do.call(rbind,timee)))/r
output=list(RRNIE=RRIE,DEmedpb=DEmedpb,IEmedpb=IEmedpb,DEstd=DEstd,IEstd=IEstd,
IECP=IECP,DECP=DECP,
IEPow=IEPow,DEPow=DEPow,IESE=IESE,DESE=DESE,PM=PM,timefin=timefin)
}
set.seed(666)
banana=MZIPMM_sim2(n=200,r=1000,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
set.seed(8202022)
banana=MZIPMM_sim2(n=200,r=1000,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
set.seed(299)
banana=MZIPMM_sim2(n=200,r=1000,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
set.seed(299)
set.seed(666)
banana=MZIPMM_sim2(n=600,r=500,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
set.seed(52022)
banana=MZIPMM_sim2(n=600,r=500,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
set.seed(1516)
banana=MZIPMM_sim2(n=600,r=500,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
set.seed(70092)
banana=MZIPMM_sim2(n=600,r=500,B0=0,B1=1,B2=0.5,a0=-0.6,a1=0.41,a2=.15,a3=.25,g0=0.35,g1=-1.5,g2=0,g3=0.25,sigma=3)
View(banana)
gc()
remove.packages("mzipmed", lib="~/R/win-library/4.1")
library(roxygen2)
library(devtools)
install_github(ams329/mzipmed)
install_github("ams329/mzipmed")
library(mzipmed)
mzipmed_data$X
setwd("~/Dissertation")
devtools::check("mzipmed")
devtools::check("mzipmed")
detach("package:mzipmed", unload = TRUE)
check("mzipmed")
library(devtools)
check("mzipmed")
setwd("~/Dissertation/mzipmed")
R CMD check --as-cran
check()
check()
help("binomial")
library(mzipmed)
barb=stats::glm(data=mzipmed_data,ziY2~binM,family=poisson())
View(barb)
barb=stats::glm(data=mzipmed_data,ziY2~binM,family=stats::poisson())
View(barb)
library(robust)
barb=robust::glmRob(data=mzipmed_data,ziY2~binM,family=stats::poisson())
zimed=binoutzimed(outcome=mzipmed_data$binY,mediator=mzipmed_data$ziM,exposure=mzipmed_data$X,
confounder=cbind(mzipmed_data$C1,mzipmed_data$C2),error="Delta",
robust=F,X=1,Xstar=0)
View(zimed)
check()
check()
check()
check()
check()
check()
n=c(200,200,200,200,200,200,600,600,600,600,600,600,1000,1000,1000,1000,1000,1000)
model=c("MZIP","MZIP","Poisson","Poisson","Linear","Linear","MZIP","MZIP","Poisson","Poisson","Linear","Linear","MZIP","MZIP","Poisson","Poisson","Linear","Linear")
method=c("Delta","Boot","Delta","Boot","Delta","Boot","Delta","Boot","Delta","Boot","Delta","Boot","Delta","Boot","Delta","Boot","Delta","Boot")
cp=c(95.1,94.7,54.0,93.2,79.8,92.6,95.0,94.7,46.0,92.2,77.7,90.9,94.8,94.5,42.1,91.4,75.7,89.2)
cpdata=data.frame(n,model,method,cp)
View(cpdata)
library(tidyverse)
library(RColorBrewer)
library(gridExtra)
library(patchwork)
ggplot(data=b3,aes(x=n,y=cp,colour=model,shape=model))+
geom_line(size=1.2)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",shape="Error")
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,shape=model))+
geom_line(size=1.2)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",shape="Error")
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,shape=method))+
geom_line(size=1.2)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",shape="Error")
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,shape=method,group=method))+
geom_line(size=1.2)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",shape="Error")
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,linetype=method))+
geom_line(size=1.2)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",shape="Error")
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,linetype=method))+
geom_line(size=1.2)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",linetype="Error")
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,linetype=method))+
geom_line(size=1.2)+
geom_hline(yintercept=95)
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,linetype=method))+
geom_line(size=1.2)+
geom_hline(yintercept=95)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",linetype="Error")
ggplot(data=cpdata,aes(x=n,y=cp,colour=model,linetype=method))+
geom_line(size=1.2)+
geom_hline(yintercept=95)+
theme_classic()+
scale_color_brewer(palette = "Dark2")+
xlab("Sample Size")+
ylab("Coverage (%)")+
#ggtitle("Delta Method Coverage")+
scale_x_continuous(breaks = round(seq(200, 1000, by = 400),1))+
ylim(c(40,100))+
labs(color="Model",linetype="Error")
R CMD check --as-cran
CMD check --as-cran
check --as-cran
setwd("~/Dissertation")
setwd("~/Dissertation/mzipmed")
help("check")
check_built()
check_built("mzipmed")
check_built(mzipmed)
remove.packages("mzipmed", lib="~/R/win-library/4.1")
install_github(ams329/mzipmed)
install_github('ams329/mzipmed')
